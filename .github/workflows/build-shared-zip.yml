name: Build shared-hosting ZIP

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      FTP_HOST: ${{ secrets.FTP_HOST }}
      FTP_USER: ${{ secrets.FTP_USER }}
      FTP_PASS: ${{ secrets.FTP_PASS }}
      ENV_FILE: ${{ secrets.ENV_FILE }}
      DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, gd, bcmath, zip, pdo_mysql
          coverage: none

      - name: Install Composer deps
        run: composer install --no-dev --optimize-autoloader --prefer-dist --ignore-platform-req=ext-calendar --no-interaction --no-ansi --no-progress

      - name: Build assets
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - run: npm ci || npm install
      - run: npm run build

      - name: Inject .env from secret (optional)
        if: ${{ env.ENV_FILE != '' }}
        run: |
          printf "%s" "${ENV_FILE}" > .env

      - name: Prune vendor to reduce size (safe)
        run: |
          # Remove VCS metadata only (safe)
          find vendor -type d -name ".git" -prune -exec rm -rf {} +

      - name: Prepare artifact
        run: |
          if [ ! -f .env ]; then cp .env.example .env; fi
          php artisan key:generate --force
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          rm -rf storage/logs/*
          mkdir -p storage/framework/{cache,data,sessions,views}
          mkdir -p public/storage
          composer dump-autoload -o

      - name: Zip app (max compression)
        run: |
          zip -r -9 krayin-shared.zip \
            app bootstrap config database public resources routes vendor artisan \
            composer.json composer.lock package.json package-lock.json vite.config.js \
            storage/lang storage/app/.gitignore storage/framework storage/logs/.gitignore \
            .env \
            packages \
            --exclude "public/admin/build/*" --exclude "node_modules/*"

      - name: Create alternate filename for FTP (binary extension)
        run: |
          cp krayin-shared.zip deploy.bin

      - name: Verify ZIP locally
        run: |
          ls -lh krayin-shared.zip || true
          sha256sum krayin-shared.zip || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: krayin-shared
          path: krayin-shared.zip

      - name: Install lftp
        if: ${{ env.FTP_HOST != '' && env.FTP_USER != '' && env.FTP_PASS != '' }}
        run: sudo apt-get update && sudo apt-get install -y lftp

      - name: Upload ZIP via FTP (InfinityFree)
        if: ${{ env.FTP_HOST != '' && env.FTP_USER != '' && env.FTP_PASS != '' }}
        run: |
          echo "üöÄ Starting FTP upload to $FTP_HOST..."
          lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "
          set ftp:passive-mode on;
          set ftp:ssl-allow yes;
          set ssl:verify-certificate no;
          set net:max-retries 3;
          set net:timeout 30;
          set cmd:fail-exit yes;
          lcd ${GITHUB_WORKSPACE};
          cd /htdocs;
          put -c -O /htdocs deploy.bin;
          bye" || {
            echo "‚ùå FTP upload failed, retrying with different settings..."
            lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "
            set ftp:passive-mode off;
            set ftp:ssl-allow no;
            set net:max-retries 3;
            set net:timeout 30;
            set cmd:fail-exit yes;
            lcd ${GITHUB_WORKSPACE};
            cd /htdocs;
            put -c -O /htdocs deploy.bin;
            bye"
          }

      - name: Create extractor script
        if: ${{ env.FTP_HOST != '' && env.FTP_USER != '' && env.FTP_PASS != '' && env.DEPLOY_TOKEN != '' }}
        run: |
          cat > deploy-extract.php <<'PHP'
          <?php
          $expected = '{{TOKEN}}';
          if (!isset($_GET['token']) || $_GET['token'] !== $expected) { http_response_code(403); exit('Forbidden'); }
          if (!class_exists('ZipArchive')) { http_response_code(500); exit('ZipArchive not available'); }
          $zipPath = __DIR__ . '/deploy.bin';
          if (!file_exists($zipPath)) {
              $alt = __DIR__ . '/krayin-shared.zip';
              if (file_exists($alt)) { $zipPath = $alt; }
          }
          if (!file_exists($zipPath)) { http_response_code(404); exit('ZIP not found'); }
          $zip = new ZipArchive();
          if ($zip->open($zipPath) !== true) { http_response_code(500); exit('Cannot open zip'); }
          if (!$zip->extractTo(__DIR__)) { http_response_code(500); exit('Extract failed'); }
          $zip->close();
          @unlink($zipPath);
          @unlink(__FILE__);
          echo 'OK';
          PHP
          sed -i "s/{{TOKEN}}/${DEPLOY_TOKEN}/g" deploy-extract.php

      - name: Upload extractor via FTP
        if: ${{ env.FTP_HOST != '' && env.FTP_USER != '' && env.FTP_PASS != '' && env.DEPLOY_TOKEN != '' }}
        run: |
          echo "üì§ Uploading extractor script..."
          lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "
          set ftp:passive-mode on;
          set ftp:ssl-allow yes;
          set ssl:verify-certificate no;
          set net:max-retries 3;
          set net:timeout 30;
          set cmd:fail-exit yes;
          cd htdocs;
          put -O . deploy-extract.php;
          bye" || {
            echo "‚ùå Extractor upload failed, retrying..."
            lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "
            set ftp:passive-mode off;
            set ftp:ssl-allow no;
            set net:max-retries 3;
            set net:timeout 30;
            set cmd:fail-exit yes;
            cd htdocs;
            put -O . deploy-extract.php;
            bye"
          }
          echo "‚úÖ Extractor script uploaded. Access: https://$FTP_HOST/deploy-extract.php?token=$DEPLOY_TOKEN"

