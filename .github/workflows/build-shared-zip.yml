name: Build shared-hosting ZIP

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    env:
      FTP_HOST: ${{ vars.FTP_HOST || secrets.FTP_HOST }}
      FTP_USER: ${{ vars.FTP_USER || secrets.FTP_USER }}
      FTP_PASS: ${{ vars.FTP_PASS || secrets.FTP_PASS }}
      ENV_FILE: ${{ vars.ENV_FILE || secrets.ENV_FILE }}
      DEPLOY_TOKEN: ${{ vars.DEPLOY_TOKEN || secrets.DEPLOY_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, gd, bcmath, zip, pdo_mysql
          coverage: none

      - name: Install Composer deps
        run: composer install --no-dev --optimize-autoloader --prefer-dist --ignore-platform-req=ext-calendar --no-interaction --no-ansi --no-progress

      - name: Build assets
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - run: npm ci || npm install
      - run: npm run build

      - name: Inject .env from secret (optional)
        if: ${{ env.ENV_FILE != '' }}
        run: |
          printf "%s" "${ENV_FILE}" > .env

      - name: Prune vendor to reduce size (safe)
        run: |
          # Remove VCS metadata only (safe)
          find vendor -type d -name ".git" -prune -exec rm -rf {} +

      - name: Prepare artifact
        run: |
          if [ ! -f .env ]; then cp .env.example .env; fi
          php artisan key:generate --force
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          rm -rf storage/logs/*
          mkdir -p storage/framework/{cache,data,sessions,views}
          mkdir -p public/storage
          composer dump-autoload -o

      - name: Zip app (max compression)
        run: |
          zip -r -9 krayin-shared.zip \
            app bootstrap config database public resources routes vendor artisan \
            composer.json composer.lock package.json package-lock.json vite.config.js \
            storage/lang storage/app/.gitignore storage/framework storage/logs/.gitignore \
            .env \
            packages \
            --exclude "public/admin/build/*" --exclude "node_modules/*"

      - name: Create alternate filename for FTP (binary extension)
        run: |
          cp krayin-shared.zip deploy.bin

      - name: Verify ZIP locally
        run: |
          ls -lh krayin-shared.zip || true
          sha256sum krayin-shared.zip || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: krayin-shared
          path: krayin-shared.zip

      - name: Install lftp
        if: ${{ env.FTP_HOST != '' && env.FTP_USER != '' && env.FTP_PASS != '' }}
        run: sudo apt-get update && sudo apt-get install -y lftp

      - name: Upload ZIP via FTP (InfinityFree)
        if: ${{ env.FTP_HOST != '' && env.FTP_USER != '' && env.FTP_PASS != '' }}
        run: |
          echo "üöÄ Starting FTP upload to $FTP_HOST..."
          echo "üìÅ Current directory: $(pwd)"
          echo "üìÑ File to upload: deploy.bin"
          echo "üìä File size: $(ls -lh deploy.bin)"
          echo "üîë FTP User: $FTP_USER"
          echo "üåê FTP Host: $FTP_HOST"

          # First, test basic FTP connection
          echo "üîó Testing basic FTP connection..."
          if lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "
          set ftp:passive-mode on;
          set ftp:ssl-allow yes;
          set ssl:verify-certificate no;
          set net:timeout 10;
          pwd;
          ls;
          bye" 2>&1; then
            echo "‚úÖ Basic FTP connection successful"
          else
            echo "‚ùå Basic FTP connection failed, trying without SSL..."
            if lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "
            set ftp:passive-mode off;
            set ftp:ssl-allow no;
            set net:timeout 10;
            pwd;
            ls;
            bye" 2>&1; then
              echo "‚úÖ Basic FTP connection successful (no SSL)"
              USE_SSL=false
            else
              echo "‚ùå FTP connection completely failed!"
              echo "üí° Check your FTP credentials and network"
              exit 1
            fi
          fi

          # Try different FTP paths for InfinityFree
          UPLOAD_PATH=""
          for FTP_PATH in "/htdocs" "/" "htdocs" "."; do
            echo "üîÑ Trying FTP path: $FTP_PATH"

            if [ "$USE_SSL" != "false" ]; then
              # Try with SSL first
              if lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "
              set ftp:passive-mode on;
              set ftp:ssl-allow yes;
              set ssl:verify-certificate no;
              set net:max-retries 1;
              set net:timeout 15;
              set cmd:fail-exit yes;
              lcd ${GITHUB_WORKSPACE};
              cd $FTP_PATH 2>/dev/null && echo 'Changed to $FTP_PATH' || echo 'Cannot cd to $FTP_PATH';
              pwd;
              put -c deploy.bin 2>/dev/null && echo 'Upload completed' || echo 'Upload failed';
              ls -la deploy.bin 2>/dev/null && echo 'File verified' || echo 'File not found after upload';
              bye" 2>&1 | grep -q "File verified"; then
                echo "‚úÖ Successfully uploaded to $FTP_PATH (SSL)"
                UPLOAD_PATH="$FTP_PATH"
                break
              fi
            fi

            # Try without SSL
            if lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "
            set ftp:passive-mode off;
            set ftp:ssl-allow no;
            set net:max-retries 1;
            set net:timeout 15;
            set cmd:fail-exit yes;
            lcd ${GITHUB_WORKSPACE};
            cd $FTP_PATH 2>/dev/null && echo 'Changed to $FTP_PATH' || echo 'Cannot cd to $FTP_PATH';
            pwd;
            put -c deploy.bin 2>/dev/null && echo 'Upload completed' || echo 'Upload failed';
            ls -la deploy.bin 2>/dev/null && echo 'File verified' || echo 'File not found after upload';
            bye" 2>&1 | grep -q "File verified"; then
              echo "‚úÖ Successfully uploaded to $FTP_PATH (no SSL)"
              UPLOAD_PATH="$FTP_PATH"
              break
            else
              echo "‚ùå Failed to upload to $FTP_PATH"
            fi
          done

          if [ -z "$UPLOAD_PATH" ]; then
            echo "‚ùå FTP upload failed completely!"
            echo "üí° Possible issues:"
            echo "   - FTP credentials incorrect"
            echo "   - FTP server blocking uploads"
            echo "   - Insufficient permissions"
            echo "   - Network/firewall issues"
            exit 1
          fi

          echo "üéâ Upload successful! Files uploaded to: $UPLOAD_PATH"
          # Store the upload path for the extractor script
          echo "UPLOAD_PATH=$UPLOAD_PATH" >> $GITHUB_ENV

      - name: Create extractor script
        if: ${{ env.FTP_HOST != '' && env.FTP_USER != '' && env.FTP_PASS != '' && env.DEPLOY_TOKEN != '' }}
        run: |
          cat > deploy-extract.php <<'PHP'
          <?php
          $expected = '{{TOKEN}}';
          if (!isset($_GET['token']) || $_GET['token'] !== $expected) { http_response_code(403); exit('Forbidden'); }

          // Debug information
          echo "üîç Debug Info:<br>";
          echo "Current directory: " . __DIR__ . "<br>";
          echo "Files in directory: " . implode(', ', scandir(__DIR__)) . "<br>";
          echo "Upload path used: {{UPLOAD_PATH}}<br>";

          if (!class_exists('ZipArchive')) { http_response_code(500); exit('ZipArchive not available'); }

          // Try multiple possible locations for the ZIP file
          $possiblePaths = [
              __DIR__ . '/deploy.bin',
              __DIR__ . '/krayin-shared.zip',
              dirname(__DIR__) . '/deploy.bin',
              dirname(__DIR__) . '/krayin-shared.zip'
          ];

          $zipPath = null;
          foreach ($possiblePaths as $path) {
              echo "Looking for: $path<br>";
              if (file_exists($path)) {
                  $zipPath = $path;
                  echo "‚úÖ Found ZIP file: $path<br>";
                  break;
              }
          }

          if (!$zipPath) {
              http_response_code(404);
              echo "<br>‚ùå ZIP file not found in any of these locations:<br>";
              foreach ($possiblePaths as $path) {
                  echo "- $path (" . (file_exists($path) ? 'exists' : 'not found') . ")<br>";
              }
              echo "<br>Available files in " . __DIR__ . ":<br>";
              foreach (scandir(__DIR__) as $file) {
                  if ($file !== '.' && $file !== '..') {
                      echo "- $file (" . (is_dir(__DIR__ . '/' . $file) ? 'directory' : 'file') . ")<br>";
                  }
              }
              exit('<br>‚ùå ZIP not found');
          }

          echo "File size: " . filesize($zipPath) . " bytes<br>";

          $zip = new ZipArchive();
          $openResult = $zip->open($zipPath);
          if ($openResult !== true) {
              http_response_code(500);
              exit('Cannot open zip (error code: ' . $openResult . ')');
          }

          echo "ZIP contains " . $zip->numFiles . " files<br>";
          echo "Extracting to: " . __DIR__ . "<br>";

          if (!$zip->extractTo(__DIR__)) {
              http_response_code(500);
              exit('Extract failed');
          }

          $zip->close();
          @unlink($zipPath);
          @unlink(__FILE__);
          echo '<br>‚úÖ OK - Extraction completed successfully!';
          PHP
          sed -i "s/{{TOKEN}}/${DEPLOY_TOKEN}/g" deploy-extract.php
          sed -i "s|{{UPLOAD_PATH}}|${UPLOAD_PATH:-htdocs}|g" deploy-extract.php

      - name: Upload extractor via FTP
        if: ${{ env.FTP_HOST != '' && env.FTP_USER != '' && env.FTP_PASS != '' && env.DEPLOY_TOKEN != '' }}
        run: |
          echo "üì§ Uploading extractor script to $UPLOAD_PATH..."
          lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "
          set ftp:passive-mode on;
          set ftp:ssl-allow yes;
          set ssl:verify-certificate no;
          set net:max-retries 3;
          set net:timeout 30;
          set cmd:fail-exit yes;
          cd ${UPLOAD_PATH:-htdocs};
          put -O . deploy-extract.php;
          ls -la deploy-extract.php;
          bye" || {
            echo "‚ùå Extractor upload failed, retrying with no SSL..."
            lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "
            set ftp:passive-mode off;
            set ftp:ssl-allow no;
            set net:max-retries 3;
            set net:timeout 30;
            set cmd:fail-exit yes;
            cd ${UPLOAD_PATH:-htdocs};
            put -O . deploy-extract.php;
            ls -la deploy-extract.php;
            bye"
          }
          echo "‚úÖ Extractor script uploaded to $UPLOAD_PATH. Access: https://$FTP_HOST/deploy-extract.php?token=$DEPLOY_TOKEN"

      - name: Verify FTP upload
        if: ${{ env.FTP_HOST != '' && env.FTP_USER != '' && env.FTP_PASS != '' }}
        run: |
          echo "üîç Verifying FTP upload in $UPLOAD_PATH..."
          lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "
          set ftp:passive-mode on;
          set ftp:ssl-allow yes;
          set ssl:verify-certificate no;
          set net:timeout 10;
          cd ${UPLOAD_PATH:-htdocs};
          ls -la deploy.bin;
          ls -la deploy-extract.php;
          bye" || {
            echo "‚ö†Ô∏è  Verification with SSL failed, trying without..."
            lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "
            set ftp:passive-mode on;
            set ftp:ssl-allow no;
            set net:timeout 10;
            cd ${UPLOAD_PATH:-htdocs};
            ls -la deploy.bin;
            ls -la deploy-extract.php;
            bye"
          }

